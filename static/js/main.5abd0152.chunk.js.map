{"version":3,"sources":["assets/brain.svg","assets/PPI.svg","assets/screen.svg","components/Header/index.js","components/AddressIP/index.js","components/Clock/index.js","components/Navigator/card.js","components/Navigator/index.js","components/Screen/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","Brain","alt","AddressIP","useState","IP","setIP","org","setOrg","connection_type","setType","a","axios","get","response","data","ip","getIP","id","Clock","Date","datetime","setDatetime","setInterval","newDate","size","toLocaleTimeString","toLocaleDateString","Card","props","title","content","Navigator","userAgent","navigator","name","appName","code","appCodeName","version","appVersion","plataform","platform","language","isOnline","onLine","cookies","cookieEnabled","colorDepth","window","screen","Screen","bpp","pixelDepth","width","height","ImgScreen","PPI","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5abd0152.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/brain.6d6a4c21.svg\";","module.exports = __webpack_public_path__ + \"static/media/PPI.ff23f6dd.svg\";","module.exports = __webpack_public_path__ + \"static/media/screen.3b66ca94.svg\";","import React from 'react';\r\n\r\nimport Brain from '../../assets/brain.svg'\r\n\r\nexport default function Header() {\r\n  return (\r\n    <header>\r\n      <div className=\"logo-container\">\r\n        <img src={Brain} alt=\"Logo do site - Ilustração de um cérebro\" className=\"pulse\" />\r\n      </div>\r\n\r\n      <div className=\"header-content\">\r\n        <h1>Brain</h1>\r\n        <p>Extraia todas as informações do seu navegador aqui!</p>\r\n        <small>Navegador - Rede - Tela - Localização </small>\r\n      </div>\r\n\r\n    </header>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default function AddressIP() {\r\n  const [IP, setIP] = useState('');\r\n  const [org, setOrg] = useState('');\r\n  const [connection_type, setType] = useState('');\r\n\r\n  async function getIP() {\r\n    const response = await axios.get('https://json.geoiplookup.io');\r\n    const { ip, org, connection_type } = response.data;\r\n    setIP(ip);\r\n    setOrg(org);\r\n    setType(connection_type);\r\n  }\r\n\r\n  getIP();\r\n\r\n  return (\r\n    <section className=\"container-fluid address\">\r\n      <h2 id=\"ip\">{IP !== '' ? IP : 'Endereço IPV6'}</h2>\r\n      <p>{org !== '' ? org : 'Provedor de internet'}</p>\r\n      <p>{connection_type !== '' ? connection_type : 'Tipo de conexão'}</p>\r\n    </section>\r\n  );\r\n}","import React, {useState} from 'react';\r\nimport { FiClock } from 'react-icons/fi';\r\n\r\n\r\nexport default function Clock() {\r\n  const [datetime, setDatetime] = useState(new Date());\r\n\r\n  setInterval(()=>{\r\n    let newDate = new Date();\r\n    setDatetime(newDate);\r\n  }, 1000)\r\n\r\n\r\n  return (\r\n    <section className=\"container-fluid clock\">\r\n      <FiClock size={138}></FiClock>\r\n      <article className=\"clock-content\">\r\n        <h2>{datetime.toLocaleTimeString()}</h2>\r\n        <p>{datetime.toLocaleDateString()}</p>\r\n      </article>\r\n    </section>\r\n  );\r\n}","import React from 'react';\r\n\r\nexport default function Card(props) {\r\n  return (\r\n    <article className=\"card\">\r\n      <h4>{props.title}</h4>\r\n      <p>{props.content}</p>\r\n    </article>\r\n  );\r\n}","import React from 'react';\r\nimport Card from './card';\r\n\r\nexport default function Navigator() {\r\n\r\n  const userAgent = navigator.userAgent;\r\n  const name = navigator.appName;\r\n  const code = navigator.appCodeName;\r\n  const version = navigator.appVersion;\r\n  const plataform = navigator.platform;\r\n  const language = navigator.language;\r\n  const isOnline = navigator.onLine;\r\n  const cookies = navigator.cookieEnabled;\r\n  const colorDepth = window.screen.colorDepth;\r\n\r\n  return (\r\n    <section className=\"container-fluid navigator\">\r\n      <h2>Navegador</h2>\r\n\r\n      <div className=\"card-group\">\r\n        <Card\r\n          title={\"Agente de usuário\"}\r\n          content={userAgent}\r\n        />\r\n        <Card\r\n          title={\"Versão\"}\r\n          content={version}\r\n        />\r\n        <Card\r\n          title={\"Nome\"}\r\n          content={name}\r\n        />\r\n        <Card\r\n          title={\"Código\"}\r\n          content={code}\r\n        />\r\n        <Card\r\n          title={\"Plataforma\"}\r\n          content={plataform}\r\n        />\r\n        <Card\r\n          title={\"Linguagem\"}\r\n          content={language}\r\n        />\r\n        <Card\r\n          title={\"Status\"}\r\n          content={isOnline === true ? \"Online\" : \"Offline\"}\r\n        />\r\n        <Card\r\n          title={\"Cookies\"}\r\n          content={cookies === \"true\" ? \"Ativo\" : \"Inativo\"}\r\n        />\r\n        <Card\r\n          title={\"Profundidade de cores\"}\r\n          content={`${colorDepth} bits`}\r\n        />\r\n      </div>\r\n    </section>\r\n  );\r\n}","import React from 'react';\r\nimport PPI from '../../assets/PPI.svg';\r\nimport ImgScreen from '../../assets/screen.svg';\r\n\r\n\r\nexport default function Screen() {\r\n  const bpp = window.screen.pixelDepth;\r\n  const width = window.screen.width;\r\n  const height = window.screen.height;\r\n\r\n\r\n  return (\r\n    <section className=\"container-fluid screen\">\r\n      <h2>Tela</h2>\r\n\r\n      <div className=\"group-screen\">\r\n        <div className=\"screen-container\">\r\n          <img src={ImgScreen} alt=\"Dimensões de um retângulo\"></img>\r\n          <p>{`${width} X ${height} px`}</p>\r\n        </div>\r\n        <div className=\"ppi-container\">\r\n          <img src={PPI} alt=\"Bits por pixel\"></img>\r\n          <p>{`${bpp} BPP`}</p>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}","import React from 'react';\n\nimport Header from './components/Header';\nimport AddressIP from './components/AddressIP';\nimport Clock from './components/Clock';\nimport Navigator from './components/Navigator';\n//import Location from './components/Location';\nimport Screen from './components/Screen';\n\n\nfunction App() {\n  return (\n    <main>\n      <Header />\n      <Navigator />\n      <Screen />\n      <AddressIP />\n      <Clock />      \n      {/* <Location /> */}\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './style/index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}