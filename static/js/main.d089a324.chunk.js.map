{"version":3,"sources":["assets/brain.svg","components/Header/index.js","components/Card/index.js","components/Information/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","Brain","alt","Card","props","title","content","Information","useState","IP","setIP","org","setOrg","connection_type","setType","userAgent","navigator","name","appName","code","appCodeName","version","appVersion","plataform","platform","language","isOnline","onLine","cookies","cookieEnabled","colorDepth","window","screen","bpp","pixelDepth","width","height","orientation","a","axios","get","response","data","ip","useEffect","getIP","type","Footer","href","target","size","color","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d089a324.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/brain.7bf6ce73.svg\";","import React from 'react';\r\n\r\nimport Brain from '../../assets/brain.svg';\r\nimport './style.scss';\r\n\r\nexport default function Header () {\r\n  return (\r\n    <header>\r\n      <div className=\"header-content\">\r\n        <h1>Brain</h1>\r\n        <p>Extraia informações úteis de sua tela e seu navegador</p>\r\n      </div>\r\n\r\n      <div className=\"logo-container\">\r\n        <img src={ Brain } alt=\"Logo do site - Ilustração de um cérebro\" className=\"pulse\" />\r\n      </div>\r\n    </header>\r\n  );\r\n}","import React from 'react';\r\nimport './style.scss';\r\n\r\nexport default function Card(props) {\r\n  return (\r\n    <article className=\"card\">\r\n      <h4>{props.title}</h4>\r\n      <p>{props.content}</p>     \r\n    </article>\r\n  );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Card from '../Card';\r\n\r\nexport default function Information () {\r\n  const [ IP, setIP ] = useState( '' );\r\n  const [ org, setOrg ] = useState( '' );\r\n  const [ connection_type, setType ] = useState( '' );\r\n\r\n  const userAgent = navigator.userAgent;\r\n  const name = navigator.appName;\r\n  const code = navigator.appCodeName;\r\n  const version = navigator.appVersion;\r\n  const plataform = navigator.platform;\r\n  const language = navigator.language;\r\n  const isOnline = navigator.onLine;\r\n  const cookies = navigator.cookieEnabled;\r\n\r\n  const colorDepth = window.screen.colorDepth;\r\n  const bpp = window.screen.pixelDepth;\r\n  const width = window.screen.width;\r\n  const height = window.screen.height;\r\n  const orientation = window.screen.orientation;\r\n\r\n  useEffect( () => {\r\n    getIP();\r\n  }, [] )\r\n\r\n  async function getIP () {\r\n    const response = await axios.get( 'https://json.geoiplookup.io' );\r\n    const { ip, org, connection_type } = response.data;\r\n    setIP( ip );\r\n    setOrg( org );\r\n    setType( connection_type );\r\n  }\r\n\r\n  return (\r\n    <section className=\"container-fluid\">\r\n      <div className=\"card-group\">\r\n        <Card\r\n          title={ \"Agente de usuário\" }\r\n          content={ userAgent }\r\n        />\r\n        <Card\r\n          title={ \"Versão\" }\r\n          content={ version }\r\n        />\r\n        <Card\r\n          title={ \"Nome\" }\r\n          content={ name }\r\n        />\r\n        <Card\r\n          title={ \"Código\" }\r\n          content={ code }\r\n        />\r\n        <Card\r\n          title={ \"Plataforma\" }\r\n          content={ plataform }\r\n        />\r\n        <Card\r\n          title={ \"Linguagem\" }\r\n          content={ language }\r\n        />\r\n        <Card\r\n          title={ \"Status\" }\r\n          content={ isOnline === true ? \"Online\" : \"Offline\" }\r\n        />\r\n        <Card\r\n          title={ \"Cookies\" }\r\n          content={ cookies === \"true\" ? \"Ativo\" : \"Inativo\" }\r\n        />\r\n        <Card\r\n          title={ \"Profundidade de cores\" }\r\n          content={ `${ colorDepth } bits` }\r\n        />\r\n        <Card\r\n          title={ \"Tamanho da tela\" }\r\n          content={ `${ width } X ${ height } px` }\r\n        />\r\n        <Card\r\n          title={ \"Bits por Pixel\" }\r\n          content={ `${ bpp } BPP` }\r\n        />\r\n        <Card\r\n          title={ \"IPV6\" }\r\n          content={ IP }\r\n        />\r\n        <Card\r\n          title={ \"Provedor\" }\r\n          content={ org }\r\n        />\r\n        <Card\r\n          title={ \"Conexão\" }\r\n          content={ connection_type }\r\n        />\r\n        <Card\r\n          title={ \"Orientação de tela\" }\r\n          content={ orientation.type }\r\n        />\r\n      </div>\r\n    </section>\r\n  );\r\n}","import React from 'react';\r\nimport { FiGithub, FiMail, FiLinkedin } from 'react-icons/fi';\r\nimport './style.scss';\r\n\r\nexport default function Footer () {\r\n  return (\r\n    <footer>\r\n      <div className=\"links\">\r\n        <a href=\"https://github.com/rbmelolima\" title=\"Ir para github\" target=\"blank\">\r\n          <FiGithub size={ 24 } color=\"000000\" />\r\n        </a>\r\n        <a href=\"mailto:rbmelolima@gmail.com\" title=\"Ir para email\" target=\"blank\">\r\n          <FiMail size={ 24 } color=\"000000\" />\r\n        </a>\r\n        <a href=\"https://www.linkedin.com/in/rbmelolima/\" title=\"Ir para linkedin\" target=\"blank\">\r\n          <FiLinkedin size={ 24 } color=\"000000\" />\r\n        </a>\r\n      </div>\r\n    </footer>\r\n  )\r\n}","import React from 'react';\n\nimport Header from './components/Header';\nimport Information from './components/Information';\nimport Footer from './components/Footer';\n\nfunction App () {\n  return (\n    <main>\n      <Header />\n      <Information />\n      <Footer />\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './style/all.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}